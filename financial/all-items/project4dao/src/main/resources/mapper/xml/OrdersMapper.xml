<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xa.mapper.OrdersMapper" >
  <resultMap id="BaseResultMap" type="com.xa.entity.Orders" >
   <id column="id" property="id" jdbcType="BIGINT" />
    <result column="sum_price" property="sumPrice" jdbcType="REAL" />
    <result column="order_no" property="orderNo" jdbcType="VARCHAR" />
    <result column="buyer_id" property="buyerId" jdbcType="BIGINT" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="src" property="src" jdbcType="INTEGER" />
    <result column="rece_way" property="receWay" jdbcType="INTEGER"/>
    <result column="address_id" property="addressId" jdbcType="BIGINT" />
    <result column="generate_time" property="generateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
   id,
    sum_price, 
    order_no, 
    buyer_id, 
    state, 
    src,
    rece_way,
    address_id,
    generate_time
  </sql>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from orders
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.xa.entity.Orders" useGeneratedKeys="true" keyProperty="id">
    insert into orders (id, sum_price, order_no, 
      buyer_id,
       state,
       src,
        rece_way,
        address_id,
        generate_time
      )
    values (#{id,jdbcType=BIGINT}, #{sumPrice,jdbcType=REAL}, #{orderNo,jdbcType=VARCHAR}, 
      #{buyerId,jdbcType=BIGINT},
       #{state,jdbcType=INTEGER},
       #{src},
       #{receWay}, 
       #{addressId},
       #{generateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  
  <insert id="insertSelective" parameterType="com.xa.entity.Orders" >
    insert into orders
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="state != null" >
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.xa.entity.Orders" >
   update orders
    <set >
      <if test="sumPrice != null" >
        sum_price = #{sumPrice,jdbcType=REAL},
      </if>
      <if test="orderNo != null" >
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="buyerId != null" >
        buyer_id = #{buyerId,jdbcType=BIGINT},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      
      <if test="src != null">
        src=#{src},
      </if>
      
      <if test="receWay != null">
         rece_way = #{receWay},
      </if>
      
      <if test="addressId != null">
         address_id=#{addressId},
      </if>
      
      
      <if test="generateTime != null" >
        generate_time = #{generateTime,jdbcType=TIMESTAMP}
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xa.entity.Orders" >
    update orders
    set state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  
  <select id="selectByPrimaryKey" resultType="com.xa.entity.Orders" parameterType="java.lang.Long">
    select 
    o.generate_time as generateTime,
    o.rece_way as receWay,
    o.address_id as addressId,
    o.sum_price as sumPrice,
    o.* from orders o where id=#{id,jdbcType=BIGINT}
  </select>
  
  <select id="getOrdersByState" resultType="com.xa.entity.Orders" parameterType="java.util.Map">
  select t.* from (
   SELECT 
   t.sum_price as sumPrice,
   t.order_no as orderNo,
   t.buyer_id as buyerId,
   t.generate_time as generateTime,
   t.rece_way as receWay,
   t.address_id as addressId,
   t.* from orders t where buyer_id=#{buyerId} and  state=#{state}
   ) t order by t.generateTime desc
  </select>
  
  <select id="findOrderByOrderNo" parameterType="java.lang.String" resultType="com.xa.entity.Orders">
      select 
       t.sum_price as sumPrice,
   t.order_no as orderNo,
   t.buyer_id as buyerId,
   t.generate_time as generateTime,
   t.rece_way as receWay,
   t.address_id as addressId,
      t.* from orders  t where order_no=#{orderNo}
  </select>
  
  
  <select id="getOrderCountByGoodId" resultType="long" parameterType="java.util.Map">
  
  <!-- 
  select count(1) from (
  select o.*, og.id as og_id, og.good_id from ( select id from orders where buyer_id=#{buyerId} and state != 7  ) o left join order_good og on o.id=og.order_id ) t where t.good_id=#{goodId}
   -->
  
SELECT sum(t.count) as sum from (

SELECT t.count from (
SELECT
	scg.goods_id AS goodId,
  scg.count
FROM
	(
		SELECT
			id AS cartId
		FROM
			shopping_cart
		WHERE
			buyer_id = #{buyerId}
	) sc
LEFT JOIN (select * from shopping_cart_goods where state=1) scg ON sc.cartId = scg.shopping_cart_id
 ) t where t.goodId=#{goodId}

 UNION
SELECT
	count(1) as count
FROM
	(
		SELECT
			o.*, og.id AS og_id,
			og.good_id
		FROM
			(
				SELECT
					id
				FROM
					orders
				WHERE
					buyer_id = #{buyerId}
				AND state != 7
			) o
		LEFT JOIN order_good og ON o.id = og.order_id
	) t
WHERE
	t.good_id = #{goodId}
 ) t 
  
  </select>
  
  <select id="findAll" resultType="com.xa.entity.Orders">
    select 
    t.sum_price as sumPrice,
    t.order_no as orderNo,
    t.buyer_id as buyerId,
    t.rece_way as receWay,
    t.address_id as addressId,
    t.generate_time as generateTime,
    t.* from orders t
  </select>
  
  <!-- 搜索订单 -->
  <select id="searchOrder" resultType="com.xa.dto.OrderDto" parameterType="java.util.Map">
   select * from (
  select o.*,
  b.mobile from (
   select 
    round(t.sum_price,2) as sumPrice,
    t.order_no as orderNo,
    t.buyer_id as buyerId,
    t.id as orderId,
    t.rece_way as receWay,
    t.address_id as addressId,
    t.generate_time as generateTime,
    t.* from orders t where 1=1 
    
    <if test="stateS != null">
        and state = ${stateS}
    </if>
    
    <if test="receWayS != null">
       and rece_way = ${receWayS}
    </if>
    
    <if test="startTime != null">
        and generate_time &gt; '${startTime}'
    </if>
    
    <if test="endTime != null">
        and generate_time &lt; '${endTime}'
    </if>
    
    ) o left join buyers b on o.buyerId=b.id where 1=1
    
     <if test="nameS != null" >
    	and (o.order_no like '%${nameS}%' or b.mobile like '%${nameS}%' )
    </if>
    ) t  order by t.generateTime desc
  </select>
  
  <select id="getOrderDtoByOrderId" resultType="com.xa.dto.OrderDto" parameterType="long">
  select o.*,
  b.mobile from (
   select 
    t.sum_price as sumPrice,
    t.order_no as orderNo,
    t.buyer_id as buyerId,
    t.id as orderId,
    t.rece_way as receWay,
    t.address_id as addressId,
    t.generate_time as generateTime,
    t.* from orders t where t.id=#{orderId} 
    ) o left join buyers b on o.buyerId=b.id 
     
  </select>
  
  <!-- 获取订单中可以使用优惠券的商品 -->
  <select id="getCanUseCouponsGood" parameterType="java.util.Map" resultType="java.lang.Long">

SELECT
	*
FROM
	(
		SELECT
			<!-- 
			t.id,-->
			t2.goodId 
		FROM
			(
				SELECT
					t.id
				FROM
					(
					<if test="brandId != null">
						SELECT
							*
						FROM
							goods
						WHERE
							brand_id = ${brandId}
					</if>
					<if test="brandId != null &amp;&amp; classId != null">
						UNION
					</if>
					<if test="classId != null">
							SELECT
								*
							FROM
								goods
							WHERE
								classid = ${classId}
					</if>
					<if test="classId != null &amp;&amp; countryId != null">
							UNION
					</if>
					<if test="countryId !=null">
								SELECT
									*
								FROM
									goods
								WHERE
									country_id = ${countryId}
					</if>
					) t
				GROUP BY
					t.id
			) t
		LEFT JOIN (
			SELECT
				t.*
			FROM
				(
					SELECT
						og.*
					FROM
						(
							SELECT
								good_id AS goodId
							FROM
								order_good
							WHERE
								order_id = ${orderId}
						) og
					LEFT JOIN goods g ON og.goodId = g.id
				) t
			UNION
				SELECT
					scg.goods_id AS goodId
				FROM
					(
						SELECT
							scg_id AS scgId
						FROM
							scg_order_release
						WHERE
							order_id = ${orderId}
					) sor
				LEFT JOIN shopping_cart_goods scg ON sor.scgId = scg.id
		) t2 ON t.id = t2.goodId
	) t
WHERE
	t.goodId IS NOT NULL

  </select>
  
</mapper>